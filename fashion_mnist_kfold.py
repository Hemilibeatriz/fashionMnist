# -*- coding: utf-8 -*-
"""Fashion_Mnist_KFOLD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ADNcAs_Zbb6xSBtBvuAe91rAo_mVJd12
"""

from keras.datasets import fashion_mnist
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D
from keras.utils import np_utils
import numpy as np
from sklearn.model_selection import StratifiedKFold

#semente geradora de numeros aleatorios
seed = 5
np.random.seed(seed)

(X, y), (X_teste, y_teste) = fashion_mnist.load_data()

#adequações para biblioteca
print(X.shape)
previsores = X.reshape(X.shape[0], 28,28,1)
previsores = previsores.astype('float32')
print(previsores.shape)

#normalização
previsores /=255

#tranformação no tipo de saída
classe = np_utils.to_categorical(y,10)
print(classe.shape)
print(classe)

kfold = StratifiedKFold(n_splits = 5, shuffle = True, random_state= seed)

resultados=[]


b = np.zeros(shape = (classe.shape[0], 1))
print(b)
print(b.shape)

for indice_treinamento, indice_teste in kfold.split(previsores, np.zeros(shape = (classe.shape[0], 1))):
   print('Indice de treinamento:', indice_treinamento, 'Indice de Teste', indice_teste)

for indice_treinamento, indice_teste in kfold.split(previsores, np.zeros(shape = (classe.shape[0], 1))):
  classificador = Sequential()
  classificador.add(Conv2D(32,(3,3), input_shape=(28,28,1), activation = 'relu'))
  classificador.add(MaxPooling2D(pool_size=(2,2)))
  classificador.add(Flatten())
  classificador.add(Dense(units = 128, activation = 'relu'))
  classificador.add(Dense(units = 10, activation = 'softmax'))
  classificador.compile(loss='categorical_crossentropy', optimizer = 'adam', metrics =['accuracy'])

  classificador.fit(previsores[indice_treinamento], classe[indice_treinamento], batch_size = 128, epochs=2)
  precisao = classificador.evaluate(previsores[indice_teste], classe[indice_teste])
  resultados.append(precisao[1])

media = sum(resultados)/len(resultados)
media

#resultados